- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`
 
mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, entityName, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger')).form-floating
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      placeholder=t(`views.${entityName}.${propertyName}`)
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
    label(for= inputId)=t(`views.${entityName}.${propertyName}`)

mixin submit(form = null)
  input(class='btn btn-outline-secondary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin textarea(entity, entityName, propertyName)
  .mb-3
    - textareaId = getInputId(propertyName)
      label(for=textareaId)=t(`views.${entityName}.${propertyName}`)
      textarea(
        id=textareaId
        class='form-control'
        name=getInputName(propertyName)
      )&attributes(attributes)=_.get(entity, propertyName, '')

mixin select(entity, entityName, propertyName, errors = {})
  .mb-3
    - propertyErrors = _.get(errors, propertyName)
    - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
    - selectId = getInputId(propertyName)
    - isMultiple = propertyName == 'labels'
    - getName = (item) => propertyName == 'executorId' ? `${item.firstName} ${item.lastName}` : item.name
      label(for=selectId)=t(`views.${entityName}.${propertyName.replace('Id', '')}`)
      select(
        id=selectId
        class=classLine
        name=getInputName(propertyName)
        multiple=isMultiple
      )&attributes(attributes)
        if propertyName != 'labels'
          option=''
        each item in entity
          - isSelected = Number(item.id) === Number(task[propertyName]) || selectedLabelsIds?.includes(item.id)
          option(value=item.id selected=isSelected)=getName(item)
      if !_.isEmpty(propertyErrors)
        .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin filterSelect(entity, propertyName)
  .col-12.col-md
    .input-group.mb-3
      - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
      - selectId = getInputId(propertyName)
      - getName = (item) => propertyName == 'executorId' ? `${item.firstName} ${item.lastName}` : item.name
        label(class='input-group-text' for=selectId)=t(`views.tasks.${propertyName.replace('Id', '')}`)
        select(
          id=selectId
          class='form-select'
          name=propertyName
        )&attributes(attributes)
          option=''
          each item in entity
            if item.id == query[propertyName]
              option(value=item.id selected)=getName(item)
            else
              option(value=item.id)=getName(item)
